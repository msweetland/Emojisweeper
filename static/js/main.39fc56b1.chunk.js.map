{"version":3,"sources":["MineSweeper/MinesweeperTile.js","MineSweeper/index.js","components/Tile.jsx","components/Options.jsx","containers/Game.jsx","index.jsx"],"names":["MinesweeperTile","this","hasBomb","hasBeenVisited","clue","showFlag","showBomb","showClue","showWin","Minesweeper","numRows","numCols","percentBombs","getBoard","board","getGameStats","moves","isGameOver","isWinner","endGame","forEach","row","tile","toggleBomb","winGame","toggleWin","search","originRow","originCol","stack","push","length","coords","pop","col","tilesAround","numBombs","reduce","acc","nextRow","nextCol","nextTile","markVisited","isPlacesToMove","Math","ceil","Array","from","placeBombs","bombsToPlace","n","ranRow","floor","random","ranCol","placeBomb","removeBomb","console","log","toggleFlag","Tile","onLeftClick","event","preventDefault","props","onRightClick","type","onClick","onContextMenu","className","currentView","React","Component","Options","onNewGame","Game","height","width","game","setState","onMovePrimary","primaryMove","onMoveSecondary","secondaryMove","state","map","rowIdx","colIdx","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39fc56b1.chunk.js","sourcesContent":["class MinesweeperTile {\n  constructor() {\n    // game variables\n    this.hasBomb = false;\n    this.hasBeenVisited = false;\n    this.clue = false;\n\n    this.showFlag = false;\n    this.showBomb = false;\n    this.showClue = false;\n    this.showWin = false;\n  }\n\n  currentView() {\n    if (this.showWin) {\n      return '🔥';\n    }\n\n    if (this.hasBeenVisited) {\n      return '👍';\n    }\n\n    if (this.showBomb) {\n      return '💣';\n    }\n\n    if (this.showFlag) {\n      return '🚩';\n    }\n\n    switch (this.clue) {\n      case 8:\n        return '8️⃣';\n      case 7:\n        return '7️⃣';\n      case 6:\n        return '6️⃣';\n      case 5:\n        return '5️⃣';\n      case 4:\n        return '4️⃣';\n      case 3:\n        return '3️⃣';\n      case 2:\n        return '2️⃣';\n      case 1:\n        return '1️⃣';\n      default:\n        return '⬜';\n    }\n  }\n\n  placeBomb() {\n    this.hasBomb = true;\n  }\n\n  removeBomb() {\n    this.hasBomb = false;\n  }\n\n  toggleFlag() {\n    if (!this.hasBeenVisited) {\n      this.showFlag = !this.showFlag;\n    }\n  }\n\n  toggleBomb() {\n    this.showBomb = !this.showBomb;\n  }\n\n  toggleWin() {\n    this.showWin = !this.showWin;\n  }\n\n  markVisited() {\n    this.hasBeenVisited = true;\n  }\n\n  unmarkVisited() {\n    this.hasBeenVisited = false;\n  }\n}\n\nexport default MinesweeperTile;\n","import MinesweeperTile from './MinesweeperTile';\n\nclass Minesweeper {\n  constructor(numRows = 16, numCols = 16, percentBombs = 0.01) {\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.numBombs = Math.ceil(numRows * numCols) * percentBombs;\n    this.moves = 0;\n    this.isGameOver = false;\n    this.isWinner = false;\n    this.board = Array.from({ length: numRows }, () => {\n      return Array.from({ length: numCols }, () => new MinesweeperTile());\n    });\n    this.placeBombs(this.numBombs - 1);\n  }\n\n  getBoard = () => this.board;\n\n  getGameStats = () => ({\n    moves: this.moves,\n    isGameOver: this.isGameOver,\n    isWinner: this.isWinner\n  });\n\n  endGame = () => {\n    this.isGameOver = true;\n    this.board.forEach(row => {\n      row.forEach(tile => {\n        if (tile.hasBomb) {\n          tile.toggleBomb();\n        }\n      });\n    });\n  };\n\n  winGame = () => {\n    this.isGameOver = true;\n    this.isWinner = true;\n    this.board.forEach(row => {\n      row.forEach(tile => {\n        if (tile.hasBomb) {\n          tile.toggleWin();\n        }\n      });\n    });\n  };\n\n  placeBombs(bombsToPlace) {\n    let n = bombsToPlace;\n    while (n > 0) {\n      const ranRow = Math.floor(Math.random() * (this.numRows - 0));\n      const ranCol = Math.floor(Math.random() * (this.numCols - 0));\n      const tile = this.board[ranRow][ranCol];\n      if (!tile.hasBomb && !tile.hasBeenVisited) {\n        tile.placeBomb();\n        n -= 1;\n      }\n    }\n  }\n\n  primaryMove(row, col) {\n    const tile = this.board[row][col];\n    if (this.isGameOver || tile.hasBeenVisited || !this.isPlacesToMove()) {\n      return this.board;\n    }\n\n    // check mark tile on click\n    if (this.moves === 0 && tile.hasBomb) {\n      tile.removeBomb();\n      this.placeBombs(1);\n      this.search(row, col);\n    } else if (tile.hasBomb) {\n      this.endGame();\n    } else if (!tile.clue) {\n      this.search(row, col);\n    }\n\n    this.moves += 1;\n\n    if (!this.isPlacesToMove()) {\n      this.winGame();\n    }\n\n    console.log(tile);\n    return this.board;\n  }\n\n  secondaryMove(row, col) {\n    if (!this.isGameOver) {\n      const tile = this.board[row][col];\n      if (!tile.clue) {\n        tile.toggleFlag();\n      }\n    }\n    return this.board;\n  }\n\n  search = (originRow, originCol) => {\n    // if neighbor has bomb stop and count set clue else add neighbors to stack\n    const stack = [];\n    stack.push([originRow, originCol]);\n    while (stack.length > 0) {\n      const coords = stack.pop();\n      const row = coords[0];\n      const col = coords[1];\n      const tile = this.board[row][col];\n      const tilesAround = [];\n\n      // top left\n      if (row - 1 >= 0 && col - 1 >= 0) {\n        tilesAround.push([row - 1, col - 1]);\n      }\n\n      // top\n      if (row - 1 >= 0) {\n        tilesAround.push([row - 1, col]);\n      }\n\n      // top right\n      if (row - 1 >= 0 && col + 1 < this.numCols) {\n        tilesAround.push([row - 1, col + 1]);\n      }\n\n      // right\n      if (col + 1 < this.numCols) {\n        tilesAround.push([row, col + 1]);\n      }\n\n      // bottom right\n      if (row + 1 < this.numRows && col + 1 < this.numCols) {\n        tilesAround.push([row + 1, col + 1]);\n      }\n\n      // bottom\n      if (row + 1 < this.numRows) {\n        tilesAround.push([row + 1, col]);\n      }\n\n      // bottom left\n      if (row + 1 < this.numRows && col - 1 >= 0) {\n        tilesAround.push([row + 1, col - 1]);\n      }\n\n      // left\n      if (col - 1 >= 0) {\n        tilesAround.push([row, col - 1]);\n      }\n\n      const numBombs = tilesAround.reduce((acc, [nextRow, nextCol]) => {\n        const nextTile = this.board[nextRow][nextCol];\n        if (!nextTile.hasBeenVisited && nextTile.hasBomb) {\n          return acc + 1;\n        }\n        return acc;\n      }, 0);\n\n      if (numBombs > 0) {\n        tile.clue = numBombs;\n      } else {\n        tile.markVisited();\n        tilesAround.forEach(([nextRow, nextCol]) => {\n          const nextTile = this.board[nextRow][nextCol];\n          if (!nextTile.hasBeenVisited) {\n            stack.push([nextRow, nextCol]);\n          }\n        });\n      }\n    }\n  };\n\n  isPlacesToMove = () => {\n    for (let row = 0; row < this.numRows; ++row) {\n      for (let col = 0; col < this.numRows; ++col) {\n        const tile = this.board[row][col];\n        if (!tile.clue && !tile.hasBomb && !tile.hasBeenVisited) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n}\n\nexport default Minesweeper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MinesweeperTile from '../MineSweeper/MinesweeperTile';\n\nclass Tile extends React.Component {\n  onLeftClick = (event) => {\n    event.preventDefault();\n    const { onLeftClick, row, col } = this.props;\n    onLeftClick(row, col);\n  }\n\n  onRightClick = (event) => {\n    event.preventDefault();\n    const { onRightClick, row, col } = this.props;\n    onRightClick(row, col);\n  }\n\n  render() {\n    const { tile } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={this.onLeftClick}\n        onContextMenu={this.onRightClick}\n        className=\"Tile\"\n      >\n        <span>{tile.currentView()}</span>\n      </button>\n    );\n  }\n}\n\nTile.propTypes = {\n  tile: PropTypes.instanceOf(MinesweeperTile).isRequired,\n  row: PropTypes.number.isRequired,\n  col: PropTypes.number.isRequired,\n  onLeftClick: PropTypes.func.isRequired,\n  onRightClick: PropTypes.func.isRequired\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Options extends React.Component {\n  onNewGame = (event) => {\n    event.preventDefault();\n    const { onNewGame } = this.props;\n    onNewGame();\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={this.onNewGame}\n          className=\"Options-Button\"\n        >\n          <h3>New Game</h3>\n        </button>\n      </div>\n    );\n  }\n}\n\nOptions.propTypes = {\n  onNewGame: PropTypes.func.isRequired,\n};\n\nexport default Options;\n","import React from 'react';\nimport Minesweeper from '../MineSweeper';\nimport Tile from '../components/Tile';\nimport Options from '../components/Options';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.game = new Minesweeper();\n    this.state = {\n      board: this.game.getBoard(),\n    };\n  }\n\n  onNewGame = (height = 16, width = 16, percentBombs = 0.15) => {\n    this.game = new Minesweeper(height, width, percentBombs);\n    const board = this.game.getBoard();\n    this.setState({ board });\n  }\n\n  onMovePrimary = (row, col) => {\n    const board = this.game.primaryMove(row, col);\n    const { isWinner } = this.game.getGameStats();\n    this.setState({ board, isWinner });\n  }\n\n  onMoveSecondary = (row, col) => {\n    const board = this.game.secondaryMove(row, col);\n    this.setState({ board });\n  }\n\n  render() {\n    const { board, isWinner } = this.state;\n    return (\n      <div className=\"Presentation\">\n        <h1>{isWinner ? 'You Win!' : 'Emojisweeper'}</h1>\n        <Options onNewGame={this.onNewGame} />\n        <div>\n          {board.map((row, rowIdx) => (\n            <div className=\"Row\">\n              {row.map((tile, colIdx) => (\n                <Tile\n                  tile={tile}\n                  row={rowIdx}\n                  col={colIdx}\n                  key={`tile_${rowIdx * 1}_${colIdx * 1}`}\n                  onLeftClick={this.onMovePrimary}\n                  onRightClick={this.onMoveSecondary}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './containers/Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}